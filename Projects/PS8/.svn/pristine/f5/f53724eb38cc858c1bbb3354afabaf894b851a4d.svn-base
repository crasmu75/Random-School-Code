using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using CustomNetworking;
using System.Windows.Forms;

namespace BoggleServerTestClient
{
	public class BoggleClientModel
	{

		// The socket used to communicate with the server.  If no connection has been
		// made yet, this is null.
		private SS socket;

		//
		// PAY ATTENTION: this is one of the most interesting features in the program!
		// Register for this event to be motified when a line of text arrives.
		public event Action<String> IncomingLineEvent;

		/// <summary>
		/// Creates a not yet connected client model.
		/// </summary>
		public BoggleClientModel()
		{
			socket = null;
		}

		/// <summary>
		/// Connect to the server at the given hostname and port and with the give name.
		/// </summary>
		public void Connect(string hostname, int port, String name)
		{
			if (socket == null)
			{
				TcpClient client = new TcpClient(hostname, port);
				socket = new SS(client.Client, UTF8Encoding.Default);
				socket.BeginSend(name + "\n", ConnectCallback, null);
				socket.BeginReceive(CommandReceived, null);
			}
		}

		private void ConnectCallback(Exception e, object payload)
		{
			MessageBox.Show("Name sent.");
		}

		/// <summary>
		/// Send a line of text to the server.
		/// </summary>
		/// <param name="line"></param>
		public void SendMessage(String line)
		{
			if (socket != null)
			{
				socket.BeginSend(line + "\n", (e, p) => { }, null);
			}
		}

		/// <summary>
		/// Deal with an arriving line of text.
		/// </summary>
		private void CommandReceived(String s, Exception e, object p)
		{
			if (IncomingLineEvent != null)
			{
				MessageBox.Show(s);
			}
			socket.BeginReceive(CommandReceived, null);
		}
	}
}