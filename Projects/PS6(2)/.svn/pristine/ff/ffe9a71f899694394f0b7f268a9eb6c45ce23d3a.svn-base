// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetCodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Opening and closing using x in corner
        /// </summary>
        public void OpenAndClose()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.OpenAndCloseParams.UISpreadsheetApplicatiWindowExePath, this.OpenAndCloseParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 9));
        }
        
        /// <summary>
        /// Make sure the instructions and about menus show up
        /// </summary>
        public void InstructionsAndAbout()
        {
            #region Variable Declarations
            WinMenuItem uIInstructionsMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIHelpMenuItem.UIInstructionsMenuItem;
            WinButton uIOKButton = this.UIInstructionsWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton1 = this.UIAboutWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.InstructionsAndAboutParams.UISpreadsheetApplicatiWindowExePath, this.InstructionsAndAboutParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'Help' -> 'Instructions' menu item
            Mouse.Click(uIInstructionsMenuItem, new Point(46, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(48, 20));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(39, 3));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(45, 9));
        }
        
        #region Properties
        public virtual OpenAndCloseParams OpenAndCloseParams
        {
            get
            {
                if ((this.mOpenAndCloseParams == null))
                {
                    this.mOpenAndCloseParams = new OpenAndCloseParams();
                }
                return this.mOpenAndCloseParams;
            }
        }
        
        public virtual InstructionsAndAboutParams InstructionsAndAboutParams
        {
            get
            {
                if ((this.mInstructionsAndAboutParams == null))
                {
                    this.mInstructionsAndAboutParams = new InstructionsAndAboutParams();
                }
                return this.mInstructionsAndAboutParams;
            }
        }
        
        public UISpreadsheetApplicatiWindow UISpreadsheetApplicatiWindow
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiWindow == null))
                {
                    this.mUISpreadsheetApplicatiWindow = new UISpreadsheetApplicatiWindow();
                }
                return this.mUISpreadsheetApplicatiWindow;
            }
        }
        
        public UIInstructionsWindow UIInstructionsWindow
        {
            get
            {
                if ((this.mUIInstructionsWindow == null))
                {
                    this.mUIInstructionsWindow = new UIInstructionsWindow();
                }
                return this.mUIInstructionsWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenAndCloseParams mOpenAndCloseParams;
        
        private InstructionsAndAboutParams mInstructionsAndAboutParams;
        
        private UISpreadsheetApplicatiWindow mUISpreadsheetApplicatiWindow;
        
        private UIInstructionsWindow mUIInstructionsWindow;
        
        private UIAboutWindow mUIAboutWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InstructionsAndAbout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class InstructionsAndAboutParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiWindow : WinWindow
    {
        
        public UISpreadsheetApplicatiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Application";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetApplicatiTitleBar UISpreadsheetApplicatiTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiTitleBar == null))
                {
                    this.mUISpreadsheetApplicatiTitleBar = new UISpreadsheetApplicatiTitleBar(this);
                }
                return this.mUISpreadsheetApplicatiTitleBar;
            }
        }
        
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetApplicatiTitleBar mUISpreadsheetApplicatiTitleBar;
        
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiTitleBar : WinTitleBar
    {
        
        public UISpreadsheetApplicatiTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIInstructionsMenuItem
        {
            get
            {
                if ((this.mUIInstructionsMenuItem == null))
                {
                    this.mUIInstructionsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIInstructionsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Instructions";
                    this.mUIInstructionsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInstructionsMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIInstructionsMenuItem;
            }
        }
        
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIInstructionsMenuItem;
        
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInstructionsWindow : WinWindow
    {
        
        public UIInstructionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Instructions";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Instructions");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
