// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetCodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Opens the app, opens a new spreadsheet, and closes both.
        /// </summary>
        public void OpenAndNewAndClose()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow1.UISpreadsheetApplicatiTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.OpenAndNewAndCloseParams.UISpreadsheetApplicatiWindowExePath, this.OpenAndNewAndCloseParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(11, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(11, 12));
        }
        
        /// <summary>
        /// Edits cell A1 to =A2 and it should display SpreadsheetUtilities.FormulaError. Also Contents text box should go from a2 to A2
        /// </summary>
        public void EditCellContentsFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UISpreadsheetApplicatiWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.EditCellContentsFormulaErrorParams.UISpreadsheetApplicatiWindowExePath, this.EditCellContentsFormulaErrorParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'textBoxCellName' text box
            Mouse.Click(uITextBoxCellNameEdit, new Point(46, 6));

            // Click 'textBoxValue' text box
            Mouse.Click(uITextBoxValueEdit, new Point(83, 11));

            // Type '=a2' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.EditCellContentsFormulaErrorParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(42, 14));
        }
        
        /// <summary>
        /// Make sure case is ignored
        /// </summary>
        public void Testa2ChangedToA2()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals 'A2'
            Assert.AreEqual(this.Testa2ChangedToA2ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "a2 was not updated to A2");
        }
        
        /// <summary>
        /// Make sure value becomes a Formula Error
        /// </summary>
        public void ValueUpdatedToFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.ValueUpdatedToFormulaErrorExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "Formula Error was not displayed");
        }
        
        #region Properties
        public virtual OpenAndNewAndCloseParams OpenAndNewAndCloseParams
        {
            get
            {
                if ((this.mOpenAndNewAndCloseParams == null))
                {
                    this.mOpenAndNewAndCloseParams = new OpenAndNewAndCloseParams();
                }
                return this.mOpenAndNewAndCloseParams;
            }
        }
        
        public virtual EditCellContentsFormulaErrorParams EditCellContentsFormulaErrorParams
        {
            get
            {
                if ((this.mEditCellContentsFormulaErrorParams == null))
                {
                    this.mEditCellContentsFormulaErrorParams = new EditCellContentsFormulaErrorParams();
                }
                return this.mEditCellContentsFormulaErrorParams;
            }
        }
        
        public virtual Testa2ChangedToA2ExpectedValues Testa2ChangedToA2ExpectedValues
        {
            get
            {
                if ((this.mTesta2ChangedToA2ExpectedValues == null))
                {
                    this.mTesta2ChangedToA2ExpectedValues = new Testa2ChangedToA2ExpectedValues();
                }
                return this.mTesta2ChangedToA2ExpectedValues;
            }
        }
        
        public virtual ValueUpdatedToFormulaErrorExpectedValues ValueUpdatedToFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedToFormulaErrorExpectedValues == null))
                {
                    this.mValueUpdatedToFormulaErrorExpectedValues = new ValueUpdatedToFormulaErrorExpectedValues();
                }
                return this.mValueUpdatedToFormulaErrorExpectedValues;
            }
        }
        
        public UISpreadsheetApplicatiWindow UISpreadsheetApplicatiWindow
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiWindow == null))
                {
                    this.mUISpreadsheetApplicatiWindow = new UISpreadsheetApplicatiWindow();
                }
                return this.mUISpreadsheetApplicatiWindow;
            }
        }
        
        public UISpreadsheetApplicatiWindow1 UISpreadsheetApplicatiWindow1
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiWindow1 == null))
                {
                    this.mUISpreadsheetApplicatiWindow1 = new UISpreadsheetApplicatiWindow1();
                }
                return this.mUISpreadsheetApplicatiWindow1;
            }
        }
        #endregion
        
        #region Fields
        private OpenAndNewAndCloseParams mOpenAndNewAndCloseParams;
        
        private EditCellContentsFormulaErrorParams mEditCellContentsFormulaErrorParams;
        
        private Testa2ChangedToA2ExpectedValues mTesta2ChangedToA2ExpectedValues;
        
        private ValueUpdatedToFormulaErrorExpectedValues mValueUpdatedToFormulaErrorExpectedValues;
        
        private UISpreadsheetApplicatiWindow mUISpreadsheetApplicatiWindow;
        
        private UISpreadsheetApplicatiWindow1 mUISpreadsheetApplicatiWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndNewAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenAndNewAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditCellContentsFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EditCellContentsFormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=a2' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=a2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Testa2ChangedToA2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Testa2ChangedToA2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals 'A2'
        /// </summary>
        public string UITextBoxContentsEditText = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedToFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedToFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBoxValueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiWindow : WinWindow
    {
        
        public UISpreadsheetApplicatiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Application";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UISpreadsheetApplicatiTitleBar UISpreadsheetApplicatiTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiTitleBar == null))
                {
                    this.mUISpreadsheetApplicatiTitleBar = new UISpreadsheetApplicatiTitleBar(this);
                }
                return this.mUISpreadsheetApplicatiTitleBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UITextBoxValueWindow UITextBoxValueWindow
        {
            get
            {
                if ((this.mUITextBoxValueWindow == null))
                {
                    this.mUITextBoxValueWindow = new UITextBoxValueWindow(this);
                }
                return this.mUITextBoxValueWindow;
            }
        }
        
        public UITextBoxContentsWindow UITextBoxContentsWindow
        {
            get
            {
                if ((this.mUITextBoxContentsWindow == null))
                {
                    this.mUITextBoxContentsWindow = new UITextBoxContentsWindow(this);
                }
                return this.mUITextBoxContentsWindow;
            }
        }
        
        public UIUpdateContentsWindow UIUpdateContentsWindow
        {
            get
            {
                if ((this.mUIUpdateContentsWindow == null))
                {
                    this.mUIUpdateContentsWindow = new UIUpdateContentsWindow(this);
                }
                return this.mUIUpdateContentsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        
        private UISpreadsheetApplicatiTitleBar mUISpreadsheetApplicatiTitleBar;
        
        private UIA1Window mUIA1Window;
        
        private UITextBoxValueWindow mUITextBoxValueWindow;
        
        private UITextBoxContentsWindow mUITextBoxContentsWindow;
        
        private UIUpdateContentsWindow mUIUpdateContentsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiTitleBar : WinTitleBar
    {
        
        public UISpreadsheetApplicatiTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellName";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellNameEdit
        {
            get
            {
                if ((this.mUITextBoxCellNameEdit == null))
                {
                    this.mUITextBoxCellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Selected Cell Name:";
                    this.mUITextBoxCellNameEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxCellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBoxValueWindow : WinWindow
    {
        
        public UITextBoxValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValue";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxValueEdit
        {
            get
            {
                if ((this.mUITextBoxValueEdit == null))
                {
                    this.mUITextBoxValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUITextBoxValueEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBoxContentsWindow : WinWindow
    {
        
        public UITextBoxContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxContents";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxContentsEdit
        {
            get
            {
                if ((this.mUITextBoxContentsEdit == null))
                {
                    this.mUITextBoxContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUITextBoxContentsEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUpdateContentsWindow : WinWindow
    {
        
        public UIUpdateContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonUpdateContents";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateContentsButton
        {
            get
            {
                if ((this.mUIUpdateContentsButton == null))
                {
                    this.mUIUpdateContentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateContentsButton.SearchProperties[WinButton.PropertyNames.Name] = "Update Contents";
                    this.mUIUpdateContentsButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIUpdateContentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateContentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiWindow1 : WinWindow
    {
        
        public UISpreadsheetApplicatiWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Application";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetApplicatiTitleBar1 UISpreadsheetApplicatiTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiTitleBar == null))
                {
                    this.mUISpreadsheetApplicatiTitleBar = new UISpreadsheetApplicatiTitleBar1(this);
                }
                return this.mUISpreadsheetApplicatiTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetApplicatiTitleBar1 mUISpreadsheetApplicatiTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetApplicatiTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
