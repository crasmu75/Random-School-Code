// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetCodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Opens the app, opens a new spreadsheet, and closes both.
        /// </summary>
        public void OpenAndNewAndClose()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow1.UISpreadsheetApplicatiTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.OpenAndNewAndCloseParams.UISpreadsheetApplicatiWindowExePath, this.OpenAndNewAndCloseParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(11, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(11, 12));
        }
        
        /// <summary>
        /// Edits cell A1 to =A2 and it should display SpreadsheetUtilities.FormulaError. Also Contents text box should go from a2 to A2
        /// </summary>
        public void EditCellContentsFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UISpreadsheetApplicatiWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.EditCellContentsFormulaErrorParams.UISpreadsheetApplicatiWindowExePath, this.EditCellContentsFormulaErrorParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'textBoxCellName' text box
            Mouse.Click(uITextBoxCellNameEdit, new Point(46, 6));

            // Click 'textBoxValue' text box
            Mouse.Click(uITextBoxValueEdit, new Point(83, 11));

            // Type '=a2' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.EditCellContentsFormulaErrorParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(42, 14));
        }
        
        /// <summary>
        /// Make sure case is ignored
        /// </summary>
        public void Testa2ChangedToA2()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals 'A2'
            Assert.AreEqual(this.Testa2ChangedToA2ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "a2 was not updated to A2");
        }
        
        /// <summary>
        /// Make sure value becomes a Formula Error
        /// </summary>
        public void ValueUpdatedToFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.ValueUpdatedToFormulaErrorExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "Formula Error was not displayed");
        }
        
        /// <summary>
        /// Accessing the instructions and about pages, and background color combo box
        /// </summary>
        public void HelpMenuAndChangeColors()
        {
            #region Variable Declarations
            WinMenuItem uIInstructionsMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIHelpMenuItem.UIInstructionsMenuItem;
            WinButton uIOKButton = this.UIInstructionsWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIHelpMenuItem.UIAboutMenuItem;
            WinButton uIOKButton1 = this.UIAboutWindow.UIOKWindow.UIOKButton;
            WinComboBox uIComboBoxColorsComboBox = this.UISpreadsheetApplicatiWindow.UIComboBoxColorsWindow.UIComboBoxColorsComboBox;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.HelpMenuAndChangeColorsParams.UISpreadsheetApplicatiWindowExePath, this.HelpMenuAndChangeColorsParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'Help' -> 'Instructions' menu item
            Mouse.Click(uIInstructionsMenuItem, new Point(46, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 16));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(48, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(35, 13));

            // Select 'pink' in 'comboBoxColors' combo box
            uIComboBoxColorsComboBox.SelectedItem = this.HelpMenuAndChangeColorsParams.UIComboBoxColorsComboBoxSelectedItem;
        }
        
        /// <summary>
        /// opens demo.sprd and updates the contents of one of the cells
        /// </summary>
        public void OpenAndUpdateASavedFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIDemosprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(63, 8));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(45, 14));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(21, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 17));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(216, 97));

            // Type '=B2/A1' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.OpenAndUpdateASavedFileParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(53, 12));
        }
        
        /// <summary>
        /// Makes sure selected cell name is displayed properly
        /// </summary>
        public void CellNameDisplayedProperly()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UISpreadsheetApplicatiWindow.UIA1Window.UITextBoxCellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'C4'
            Assert.AreEqual(this.CellNameDisplayedProperlyExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text, "Cell name not displayed properly");
        }
        
        /// <summary>
        /// Make sure value text box is updated correctlu
        /// </summary>
        public void ValueUpdatedCorrectly()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals '6'
            Assert.AreEqual(this.ValueUpdatedCorrectlyExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "value was not updated correctly");
        }
        
        /// <summary>
        /// Makes sure contents still shows up correctly
        /// </summary>
        public void ContentsUpdatedCorrectly()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals 'B2/A1'
            Assert.AreEqual(this.ContentsUpdatedCorrectlyExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents was not updated correctly");
        }
        
        /// <summary>
        /// saves the new demo file and close program
        /// </summary>
        public void SaveFileAndClose()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseWindow.UIYesWindow.UIYesButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(9, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 6));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(25, 13));

            // Select 'demo1.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveFileAndCloseParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(30, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 4));
        }
        
        /// <summary>
        /// referencing a cell not in the graph
        /// </summary>
        public void EnterInvalidCellName()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.EnterInvalidCellNameParams.UISpreadsheetApplicatiWindowExePath, this.EnterInvalidCellNameParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(376, 61));

            // Type '=aa7 + 9' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.EnterInvalidCellNameParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(56, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(62, 11));
        }
        
        /// <summary>
        /// Make sure contents is unchanged after the formula format exception
        /// </summary>
        public void CheckContentsUnchanged()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals ''
            Assert.AreEqual(this.CheckContentsUnchangedExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "Contents didn\'t update back to unchanged");
        }
        
        /// <summary>
        /// enter invalid formula syntax and try to update
        /// </summary>
        public void EnterInvalidSyntax()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Type '=32 + - 15.3' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.EnterInvalidSyntaxParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(66, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(22, 8));
        }
        
        /// <summary>
        /// make sure contents was unchanged
        /// </summary>
        public void ContentsNotUpdated()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals ''
            Assert.AreEqual(this.ContentsNotUpdatedExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents was not updated to previous");
        }
        
        /// <summary>
        /// Make a cell reference itself
        /// </summary>
        public void CircularDependencySelf()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(562, 144));

            // Type '=G6' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.CircularDependencySelfParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(50, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(28, 15));
        }
        
        /// <summary>
        /// check contents remains what it was
        /// </summary>
        public void ContentsNotUpdated1()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals ''
            Assert.AreEqual(this.ContentsNotUpdated1ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents was changed");
        }
        
        /// <summary>
        /// Make sure you are not asked if you want to save (no changes are made)
        /// </summary>
        public void CloseApplication()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(12, 6));
        }
        
        /// <summary>
        /// updating contents of a few cells
        /// </summary>
        public void UpdatingSomeCells()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.UpdatingSomeCellsParams.UISpreadsheetApplicatiWindowExePath, this.UpdatingSomeCellsParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(319, 99));

            // Type '17.56' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdatingSomeCellsParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(33, 17));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(164, 121));

            // Type 'hello' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdatingSomeCellsParams.UITextBoxContentsEditText1;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(56, 7));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(385, 146));

            // Type '=D4' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdatingSomeCellsParams.UITextBoxContentsEditText2;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(46, 5));
        }
        
        /// <summary>
        /// make sure selected cell's name is displayed
        /// </summary>
        public void SelectedCellNameDisplayed()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UISpreadsheetApplicatiWindow.UIA1Window.UITextBoxCellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'E6'
            Assert.AreEqual(this.SelectedCellNameDisplayedExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text, "selected/updated cell name was not displayed correctly");
        }
        
        /// <summary>
        /// Make sure value is same as referenced cell
        /// </summary>
        public void ValueUpdatedCorrectly1()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals '17.56'
            Assert.AreEqual(this.ValueUpdatedCorrectly1ExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "Value was not updated correctly");
        }
        
        /// <summary>
        /// make sure contents is D4, the referenced cell
        /// </summary>
        public void ContentsUpdatedCorrectly1()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals 'D4'
            Assert.AreEqual(this.ContentsUpdatedCorrectly1ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "Contents was not updated correctly");
        }
        
        /// <summary>
        /// save the file and close
        /// </summary>
        public void SaveFileAndClose1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            WinButton uIYesButton = this.UICloseWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(53, 10));

            // Select 'Test1.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveFileAndClose1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(39, 9));

            // Click Dialog
            Mouse.Click(uIItemDialog, new Point(136, 76));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(12, 15));
        }
        
        /// <summary>
        /// references 2 empty cells
        /// </summary>
        public void CreateFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Type '=D1 + D2' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.CreateFormulaErrorParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(25, 13));
        }
        
        /// <summary>
        /// make sure value is at first updated to a formula error
        /// </summary>
        public void ValueUpdatedToFormulaError1()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.ValueUpdatedToFormulaError1ExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "Formula Error was not displayed");
        }
        
        /// <summary>
        /// make sure cell contents were updated correctly
        /// </summary>
        public void ContentsUpdatedCorrectly2()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals 'D1+D2'
            Assert.AreEqual(this.ContentsUpdatedCorrectly2ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents not updated correctly");
        }
        
        /// <summary>
        /// changing the contents of a cell that another cell depends on, but the other cell still depends on another
        /// </summary>
        public void ChangeContentsOfDependentCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(301, 36));

            // Type '=15.6/9' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.ChangeContentsOfDependentCellParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(59, 13));
        }
        
        /// <summary>
        /// make sure value was computed/updated correctly
        /// </summary>
        public void ValueUpdatedCorrectly2()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals '1.73333333333333'
            Assert.AreEqual(this.ValueUpdatedCorrectly2ExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "value was not computed/updated correctly");
        }
        
        /// <summary>
        /// make sure contents were updated correctly
        /// </summary>
        public void ContentsUpdatedCorrectly3()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals '15.6/9'
            Assert.AreEqual(this.ContentsUpdatedCorrectly3ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents not updated/displayed correctly");
        }
        
        /// <summary>
        /// select this cell to see its contents and value
        /// </summary>
        public void SelectA1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(88, 44));
        }
        
        /// <summary>
        /// formula error still stands
        /// </summary>
        public void FormulaErrorRemains()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaErrorRemainsExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "formula error changed");
        }
        
        /// <summary>
        /// Cause a circular dependency and make sure contents are not updated
        /// </summary>
        public void CircularDependency()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(308, 56));

            // Type '=A1' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.CircularDependencyParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(23, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 10));
        }
        
        /// <summary>
        /// contents should not have been updated
        /// </summary>
        public void ContentsNotUpdated2()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals ''
            Assert.AreEqual(this.ContentsNotUpdated2ExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents were updated!");
        }
        
        /// <summary>
        /// open demo1.sprd
        /// </summary>
        public void OpenExistingFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.OpenExistingFileParams.UISpreadsheetApplicatiWindowExePath, this.OpenExistingFileParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(50, 11));

            // Select 'demo1.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenExistingFileParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenExistingFileParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.OpenExistingFileParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(313, 65));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(8, 16));
        }
        
        /// <summary>
        /// updating a cell with a formula
        /// </summary>
        public void UpdateCellWithFormula()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.UpdateCellWithFormulaParams.UISpreadsheetApplicatiWindowExePath, this.UpdateCellWithFormulaParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(243, 141));

            // Type '=17.34/2+(8)' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdateCellWithFormulaParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(25, 18));
        }
        
        /// <summary>
        /// Make sure formula value is updated correctly
        /// </summary>
        public void ValueUpdatedCorrectly3()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals '16.67'
            Assert.AreEqual(this.ValueUpdatedCorrectly3ExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "value wasn\'t updated correctly");
        }
        
        /// <summary>
        /// make sure contents are displayed correctly
        /// </summary>
        public void ContentsDisplayedCorrectly()
        {
            #region Variable Declarations
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxContents' text box equals '17.34/2+(8)'
            Assert.AreEqual(this.ContentsDisplayedCorrectlyExpectedValues.UITextBoxContentsEditText, uITextBoxContentsEdit.Text, "contents wasn\'t displayed correctly");
        }
        
        /// <summary>
        /// updating a cell to reference a string
        /// </summary>
        public void UpdateCellToReferenceString()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(470, 201));

            // Type 'yes' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdateCellToReferenceStringParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(41, 8));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(554, 93));

            // Type '=F9' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdateCellToReferenceStringParams.UITextBoxContentsEditText1;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(56, 8));
        }
        
        /// <summary>
        /// make sure formula error is displayed
        /// </summary>
        public void FormulaErrorDisplayed()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.FormulaErrorDisplayedExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "Formula Error is not displayed!!");
        }
        
        /// <summary>
        /// updating a cell that is referenced by another
        /// </summary>
        public void UpdateReferencedCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            #endregion

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(462, 194));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(550, 102));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(460, 197));

            // Type '987' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.UpdateReferencedCellParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(66, 12));

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(548, 99));
        }
        
        /// <summary>
        /// make sure value is updated correctly
        /// </summary>
        public void ValueUpdatedCorrectly4()
        {
            #region Variable Declarations
            WinEdit uITextBoxValueEdit = this.UISpreadsheetApplicatiWindow.UITextBoxValueWindow.UITextBoxValueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxValue' text box equals '987'
            Assert.AreEqual(this.ValueUpdatedCorrectly4ExpectedValues.UITextBoxValueEditText, uITextBoxValueEdit.Text, "value wasn\'t udated correctly");
        }
        
        /// <summary>
        /// close application and it asks if we want to save and we say no
        /// </summary>
        public void CloseApplicationAndNotSave()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            WinButton uINOButton = this.UICloseWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(10, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(18, 10));
        }
        
        /// <summary>
        /// edit this empty spreadsheet and open another sheet to check if program asks if we want to save
        /// </summary>
        public void EditSheetAndThenOpenSheet()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanelClient = this.UISpreadsheetApplicatiWindow.UIItemWindow.UISpreadsheetPanelClient;
            WinEdit uITextBoxContentsEdit = this.UISpreadsheetApplicatiWindow.UITextBoxContentsWindow.UITextBoxContentsEdit;
            WinButton uIUpdateContentsButton = this.UISpreadsheetApplicatiWindow.UIUpdateContentsWindow.UIUpdateContentsButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetApplicatiWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uIYesButton = this.UICloseWindow.UIYesWindow.UIYesButton;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit1 = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetApplicatiWindow = ApplicationUnderTest.Launch(this.EditSheetAndThenOpenSheetParams.UISpreadsheetApplicatiWindowExePath, this.EditSheetAndThenOpenSheetParams.UISpreadsheetApplicatiWindowAlternateExePath);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(324, 168));

            // Type 'never again playing video games' in 'textBoxContents' text box
            uITextBoxContentsEdit.Text = this.EditSheetAndThenOpenSheetParams.UITextBoxContentsEditText;

            // Click 'Update Contents' button
            Mouse.Click(uIUpdateContentsButton, new Point(33, 14));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(47, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 7));

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.EditSheetAndThenOpenSheetParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(25, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 9));

            // Select 'Test1.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.EditSheetAndThenOpenSheetParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.EditSheetAndThenOpenSheetParams.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(19, 9));
        }
        
        /// <summary>
        /// close (shouldn't ask if we want to save)
        /// </summary>
        public void CloseApplication1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetApplicatiWindow.UISpreadsheetApplicatiTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(12, 9));
        }
        
        #region Properties
        public virtual OpenAndNewAndCloseParams OpenAndNewAndCloseParams
        {
            get
            {
                if ((this.mOpenAndNewAndCloseParams == null))
                {
                    this.mOpenAndNewAndCloseParams = new OpenAndNewAndCloseParams();
                }
                return this.mOpenAndNewAndCloseParams;
            }
        }
        
        public virtual EditCellContentsFormulaErrorParams EditCellContentsFormulaErrorParams
        {
            get
            {
                if ((this.mEditCellContentsFormulaErrorParams == null))
                {
                    this.mEditCellContentsFormulaErrorParams = new EditCellContentsFormulaErrorParams();
                }
                return this.mEditCellContentsFormulaErrorParams;
            }
        }
        
        public virtual Testa2ChangedToA2ExpectedValues Testa2ChangedToA2ExpectedValues
        {
            get
            {
                if ((this.mTesta2ChangedToA2ExpectedValues == null))
                {
                    this.mTesta2ChangedToA2ExpectedValues = new Testa2ChangedToA2ExpectedValues();
                }
                return this.mTesta2ChangedToA2ExpectedValues;
            }
        }
        
        public virtual ValueUpdatedToFormulaErrorExpectedValues ValueUpdatedToFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedToFormulaErrorExpectedValues == null))
                {
                    this.mValueUpdatedToFormulaErrorExpectedValues = new ValueUpdatedToFormulaErrorExpectedValues();
                }
                return this.mValueUpdatedToFormulaErrorExpectedValues;
            }
        }
        
        public virtual HelpMenuAndChangeColorsParams HelpMenuAndChangeColorsParams
        {
            get
            {
                if ((this.mHelpMenuAndChangeColorsParams == null))
                {
                    this.mHelpMenuAndChangeColorsParams = new HelpMenuAndChangeColorsParams();
                }
                return this.mHelpMenuAndChangeColorsParams;
            }
        }
        
        public virtual OpenAndUpdateASavedFileParams OpenAndUpdateASavedFileParams
        {
            get
            {
                if ((this.mOpenAndUpdateASavedFileParams == null))
                {
                    this.mOpenAndUpdateASavedFileParams = new OpenAndUpdateASavedFileParams();
                }
                return this.mOpenAndUpdateASavedFileParams;
            }
        }
        
        public virtual CellNameDisplayedProperlyExpectedValues CellNameDisplayedProperlyExpectedValues
        {
            get
            {
                if ((this.mCellNameDisplayedProperlyExpectedValues == null))
                {
                    this.mCellNameDisplayedProperlyExpectedValues = new CellNameDisplayedProperlyExpectedValues();
                }
                return this.mCellNameDisplayedProperlyExpectedValues;
            }
        }
        
        public virtual ValueUpdatedCorrectlyExpectedValues ValueUpdatedCorrectlyExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedCorrectlyExpectedValues == null))
                {
                    this.mValueUpdatedCorrectlyExpectedValues = new ValueUpdatedCorrectlyExpectedValues();
                }
                return this.mValueUpdatedCorrectlyExpectedValues;
            }
        }
        
        public virtual ContentsUpdatedCorrectlyExpectedValues ContentsUpdatedCorrectlyExpectedValues
        {
            get
            {
                if ((this.mContentsUpdatedCorrectlyExpectedValues == null))
                {
                    this.mContentsUpdatedCorrectlyExpectedValues = new ContentsUpdatedCorrectlyExpectedValues();
                }
                return this.mContentsUpdatedCorrectlyExpectedValues;
            }
        }
        
        public virtual SaveFileAndCloseParams SaveFileAndCloseParams
        {
            get
            {
                if ((this.mSaveFileAndCloseParams == null))
                {
                    this.mSaveFileAndCloseParams = new SaveFileAndCloseParams();
                }
                return this.mSaveFileAndCloseParams;
            }
        }
        
        public virtual EnterInvalidCellNameParams EnterInvalidCellNameParams
        {
            get
            {
                if ((this.mEnterInvalidCellNameParams == null))
                {
                    this.mEnterInvalidCellNameParams = new EnterInvalidCellNameParams();
                }
                return this.mEnterInvalidCellNameParams;
            }
        }
        
        public virtual CheckContentsUnchangedExpectedValues CheckContentsUnchangedExpectedValues
        {
            get
            {
                if ((this.mCheckContentsUnchangedExpectedValues == null))
                {
                    this.mCheckContentsUnchangedExpectedValues = new CheckContentsUnchangedExpectedValues();
                }
                return this.mCheckContentsUnchangedExpectedValues;
            }
        }
        
        public virtual EnterInvalidSyntaxParams EnterInvalidSyntaxParams
        {
            get
            {
                if ((this.mEnterInvalidSyntaxParams == null))
                {
                    this.mEnterInvalidSyntaxParams = new EnterInvalidSyntaxParams();
                }
                return this.mEnterInvalidSyntaxParams;
            }
        }
        
        public virtual ContentsNotUpdatedExpectedValues ContentsNotUpdatedExpectedValues
        {
            get
            {
                if ((this.mContentsNotUpdatedExpectedValues == null))
                {
                    this.mContentsNotUpdatedExpectedValues = new ContentsNotUpdatedExpectedValues();
                }
                return this.mContentsNotUpdatedExpectedValues;
            }
        }
        
        public virtual CircularDependencySelfParams CircularDependencySelfParams
        {
            get
            {
                if ((this.mCircularDependencySelfParams == null))
                {
                    this.mCircularDependencySelfParams = new CircularDependencySelfParams();
                }
                return this.mCircularDependencySelfParams;
            }
        }
        
        public virtual ContentsNotUpdated1ExpectedValues ContentsNotUpdated1ExpectedValues
        {
            get
            {
                if ((this.mContentsNotUpdated1ExpectedValues == null))
                {
                    this.mContentsNotUpdated1ExpectedValues = new ContentsNotUpdated1ExpectedValues();
                }
                return this.mContentsNotUpdated1ExpectedValues;
            }
        }
        
        public virtual UpdatingSomeCellsParams UpdatingSomeCellsParams
        {
            get
            {
                if ((this.mUpdatingSomeCellsParams == null))
                {
                    this.mUpdatingSomeCellsParams = new UpdatingSomeCellsParams();
                }
                return this.mUpdatingSomeCellsParams;
            }
        }
        
        public virtual SelectedCellNameDisplayedExpectedValues SelectedCellNameDisplayedExpectedValues
        {
            get
            {
                if ((this.mSelectedCellNameDisplayedExpectedValues == null))
                {
                    this.mSelectedCellNameDisplayedExpectedValues = new SelectedCellNameDisplayedExpectedValues();
                }
                return this.mSelectedCellNameDisplayedExpectedValues;
            }
        }
        
        public virtual ValueUpdatedCorrectly1ExpectedValues ValueUpdatedCorrectly1ExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedCorrectly1ExpectedValues == null))
                {
                    this.mValueUpdatedCorrectly1ExpectedValues = new ValueUpdatedCorrectly1ExpectedValues();
                }
                return this.mValueUpdatedCorrectly1ExpectedValues;
            }
        }
        
        public virtual ContentsUpdatedCorrectly1ExpectedValues ContentsUpdatedCorrectly1ExpectedValues
        {
            get
            {
                if ((this.mContentsUpdatedCorrectly1ExpectedValues == null))
                {
                    this.mContentsUpdatedCorrectly1ExpectedValues = new ContentsUpdatedCorrectly1ExpectedValues();
                }
                return this.mContentsUpdatedCorrectly1ExpectedValues;
            }
        }
        
        public virtual SaveFileAndClose1Params SaveFileAndClose1Params
        {
            get
            {
                if ((this.mSaveFileAndClose1Params == null))
                {
                    this.mSaveFileAndClose1Params = new SaveFileAndClose1Params();
                }
                return this.mSaveFileAndClose1Params;
            }
        }
        
        public virtual CreateFormulaErrorParams CreateFormulaErrorParams
        {
            get
            {
                if ((this.mCreateFormulaErrorParams == null))
                {
                    this.mCreateFormulaErrorParams = new CreateFormulaErrorParams();
                }
                return this.mCreateFormulaErrorParams;
            }
        }
        
        public virtual ValueUpdatedToFormulaError1ExpectedValues ValueUpdatedToFormulaError1ExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedToFormulaError1ExpectedValues == null))
                {
                    this.mValueUpdatedToFormulaError1ExpectedValues = new ValueUpdatedToFormulaError1ExpectedValues();
                }
                return this.mValueUpdatedToFormulaError1ExpectedValues;
            }
        }
        
        public virtual ContentsUpdatedCorrectly2ExpectedValues ContentsUpdatedCorrectly2ExpectedValues
        {
            get
            {
                if ((this.mContentsUpdatedCorrectly2ExpectedValues == null))
                {
                    this.mContentsUpdatedCorrectly2ExpectedValues = new ContentsUpdatedCorrectly2ExpectedValues();
                }
                return this.mContentsUpdatedCorrectly2ExpectedValues;
            }
        }
        
        public virtual ChangeContentsOfDependentCellParams ChangeContentsOfDependentCellParams
        {
            get
            {
                if ((this.mChangeContentsOfDependentCellParams == null))
                {
                    this.mChangeContentsOfDependentCellParams = new ChangeContentsOfDependentCellParams();
                }
                return this.mChangeContentsOfDependentCellParams;
            }
        }
        
        public virtual ValueUpdatedCorrectly2ExpectedValues ValueUpdatedCorrectly2ExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedCorrectly2ExpectedValues == null))
                {
                    this.mValueUpdatedCorrectly2ExpectedValues = new ValueUpdatedCorrectly2ExpectedValues();
                }
                return this.mValueUpdatedCorrectly2ExpectedValues;
            }
        }
        
        public virtual ContentsUpdatedCorrectly3ExpectedValues ContentsUpdatedCorrectly3ExpectedValues
        {
            get
            {
                if ((this.mContentsUpdatedCorrectly3ExpectedValues == null))
                {
                    this.mContentsUpdatedCorrectly3ExpectedValues = new ContentsUpdatedCorrectly3ExpectedValues();
                }
                return this.mContentsUpdatedCorrectly3ExpectedValues;
            }
        }
        
        public virtual FormulaErrorRemainsExpectedValues FormulaErrorRemainsExpectedValues
        {
            get
            {
                if ((this.mFormulaErrorRemainsExpectedValues == null))
                {
                    this.mFormulaErrorRemainsExpectedValues = new FormulaErrorRemainsExpectedValues();
                }
                return this.mFormulaErrorRemainsExpectedValues;
            }
        }
        
        public virtual CircularDependencyParams CircularDependencyParams
        {
            get
            {
                if ((this.mCircularDependencyParams == null))
                {
                    this.mCircularDependencyParams = new CircularDependencyParams();
                }
                return this.mCircularDependencyParams;
            }
        }
        
        public virtual ContentsNotUpdated2ExpectedValues ContentsNotUpdated2ExpectedValues
        {
            get
            {
                if ((this.mContentsNotUpdated2ExpectedValues == null))
                {
                    this.mContentsNotUpdated2ExpectedValues = new ContentsNotUpdated2ExpectedValues();
                }
                return this.mContentsNotUpdated2ExpectedValues;
            }
        }
        
        public virtual OpenExistingFileParams OpenExistingFileParams
        {
            get
            {
                if ((this.mOpenExistingFileParams == null))
                {
                    this.mOpenExistingFileParams = new OpenExistingFileParams();
                }
                return this.mOpenExistingFileParams;
            }
        }
        
        public virtual UpdateCellWithFormulaParams UpdateCellWithFormulaParams
        {
            get
            {
                if ((this.mUpdateCellWithFormulaParams == null))
                {
                    this.mUpdateCellWithFormulaParams = new UpdateCellWithFormulaParams();
                }
                return this.mUpdateCellWithFormulaParams;
            }
        }
        
        public virtual ValueUpdatedCorrectly3ExpectedValues ValueUpdatedCorrectly3ExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedCorrectly3ExpectedValues == null))
                {
                    this.mValueUpdatedCorrectly3ExpectedValues = new ValueUpdatedCorrectly3ExpectedValues();
                }
                return this.mValueUpdatedCorrectly3ExpectedValues;
            }
        }
        
        public virtual ContentsDisplayedCorrectlyExpectedValues ContentsDisplayedCorrectlyExpectedValues
        {
            get
            {
                if ((this.mContentsDisplayedCorrectlyExpectedValues == null))
                {
                    this.mContentsDisplayedCorrectlyExpectedValues = new ContentsDisplayedCorrectlyExpectedValues();
                }
                return this.mContentsDisplayedCorrectlyExpectedValues;
            }
        }
        
        public virtual UpdateCellToReferenceStringParams UpdateCellToReferenceStringParams
        {
            get
            {
                if ((this.mUpdateCellToReferenceStringParams == null))
                {
                    this.mUpdateCellToReferenceStringParams = new UpdateCellToReferenceStringParams();
                }
                return this.mUpdateCellToReferenceStringParams;
            }
        }
        
        public virtual FormulaErrorDisplayedExpectedValues FormulaErrorDisplayedExpectedValues
        {
            get
            {
                if ((this.mFormulaErrorDisplayedExpectedValues == null))
                {
                    this.mFormulaErrorDisplayedExpectedValues = new FormulaErrorDisplayedExpectedValues();
                }
                return this.mFormulaErrorDisplayedExpectedValues;
            }
        }
        
        public virtual UpdateReferencedCellParams UpdateReferencedCellParams
        {
            get
            {
                if ((this.mUpdateReferencedCellParams == null))
                {
                    this.mUpdateReferencedCellParams = new UpdateReferencedCellParams();
                }
                return this.mUpdateReferencedCellParams;
            }
        }
        
        public virtual ValueUpdatedCorrectly4ExpectedValues ValueUpdatedCorrectly4ExpectedValues
        {
            get
            {
                if ((this.mValueUpdatedCorrectly4ExpectedValues == null))
                {
                    this.mValueUpdatedCorrectly4ExpectedValues = new ValueUpdatedCorrectly4ExpectedValues();
                }
                return this.mValueUpdatedCorrectly4ExpectedValues;
            }
        }
        
        public virtual EditSheetAndThenOpenSheetParams EditSheetAndThenOpenSheetParams
        {
            get
            {
                if ((this.mEditSheetAndThenOpenSheetParams == null))
                {
                    this.mEditSheetAndThenOpenSheetParams = new EditSheetAndThenOpenSheetParams();
                }
                return this.mEditSheetAndThenOpenSheetParams;
            }
        }
        
        public UISpreadsheetApplicatiWindow UISpreadsheetApplicatiWindow
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiWindow == null))
                {
                    this.mUISpreadsheetApplicatiWindow = new UISpreadsheetApplicatiWindow();
                }
                return this.mUISpreadsheetApplicatiWindow;
            }
        }
        
        public UISpreadsheetApplicatiWindow1 UISpreadsheetApplicatiWindow1
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiWindow1 == null))
                {
                    this.mUISpreadsheetApplicatiWindow1 = new UISpreadsheetApplicatiWindow1();
                }
                return this.mUISpreadsheetApplicatiWindow1;
            }
        }
        
        public UIInstructionsWindow UIInstructionsWindow
        {
            get
            {
                if ((this.mUIInstructionsWindow == null))
                {
                    this.mUIInstructionsWindow = new UIInstructionsWindow();
                }
                return this.mUIInstructionsWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow();
                }
                return this.mUICloseWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenAndNewAndCloseParams mOpenAndNewAndCloseParams;
        
        private EditCellContentsFormulaErrorParams mEditCellContentsFormulaErrorParams;
        
        private Testa2ChangedToA2ExpectedValues mTesta2ChangedToA2ExpectedValues;
        
        private ValueUpdatedToFormulaErrorExpectedValues mValueUpdatedToFormulaErrorExpectedValues;
        
        private HelpMenuAndChangeColorsParams mHelpMenuAndChangeColorsParams;
        
        private OpenAndUpdateASavedFileParams mOpenAndUpdateASavedFileParams;
        
        private CellNameDisplayedProperlyExpectedValues mCellNameDisplayedProperlyExpectedValues;
        
        private ValueUpdatedCorrectlyExpectedValues mValueUpdatedCorrectlyExpectedValues;
        
        private ContentsUpdatedCorrectlyExpectedValues mContentsUpdatedCorrectlyExpectedValues;
        
        private SaveFileAndCloseParams mSaveFileAndCloseParams;
        
        private EnterInvalidCellNameParams mEnterInvalidCellNameParams;
        
        private CheckContentsUnchangedExpectedValues mCheckContentsUnchangedExpectedValues;
        
        private EnterInvalidSyntaxParams mEnterInvalidSyntaxParams;
        
        private ContentsNotUpdatedExpectedValues mContentsNotUpdatedExpectedValues;
        
        private CircularDependencySelfParams mCircularDependencySelfParams;
        
        private ContentsNotUpdated1ExpectedValues mContentsNotUpdated1ExpectedValues;
        
        private UpdatingSomeCellsParams mUpdatingSomeCellsParams;
        
        private SelectedCellNameDisplayedExpectedValues mSelectedCellNameDisplayedExpectedValues;
        
        private ValueUpdatedCorrectly1ExpectedValues mValueUpdatedCorrectly1ExpectedValues;
        
        private ContentsUpdatedCorrectly1ExpectedValues mContentsUpdatedCorrectly1ExpectedValues;
        
        private SaveFileAndClose1Params mSaveFileAndClose1Params;
        
        private CreateFormulaErrorParams mCreateFormulaErrorParams;
        
        private ValueUpdatedToFormulaError1ExpectedValues mValueUpdatedToFormulaError1ExpectedValues;
        
        private ContentsUpdatedCorrectly2ExpectedValues mContentsUpdatedCorrectly2ExpectedValues;
        
        private ChangeContentsOfDependentCellParams mChangeContentsOfDependentCellParams;
        
        private ValueUpdatedCorrectly2ExpectedValues mValueUpdatedCorrectly2ExpectedValues;
        
        private ContentsUpdatedCorrectly3ExpectedValues mContentsUpdatedCorrectly3ExpectedValues;
        
        private FormulaErrorRemainsExpectedValues mFormulaErrorRemainsExpectedValues;
        
        private CircularDependencyParams mCircularDependencyParams;
        
        private ContentsNotUpdated2ExpectedValues mContentsNotUpdated2ExpectedValues;
        
        private OpenExistingFileParams mOpenExistingFileParams;
        
        private UpdateCellWithFormulaParams mUpdateCellWithFormulaParams;
        
        private ValueUpdatedCorrectly3ExpectedValues mValueUpdatedCorrectly3ExpectedValues;
        
        private ContentsDisplayedCorrectlyExpectedValues mContentsDisplayedCorrectlyExpectedValues;
        
        private UpdateCellToReferenceStringParams mUpdateCellToReferenceStringParams;
        
        private FormulaErrorDisplayedExpectedValues mFormulaErrorDisplayedExpectedValues;
        
        private UpdateReferencedCellParams mUpdateReferencedCellParams;
        
        private ValueUpdatedCorrectly4ExpectedValues mValueUpdatedCorrectly4ExpectedValues;
        
        private EditSheetAndThenOpenSheetParams mEditSheetAndThenOpenSheetParams;
        
        private UISpreadsheetApplicatiWindow mUISpreadsheetApplicatiWindow;
        
        private UISpreadsheetApplicatiWindow1 mUISpreadsheetApplicatiWindow1;
        
        private UIInstructionsWindow mUIInstructionsWindow;
        
        private UIAboutWindow mUIAboutWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIOKWindow2 mUIOKWindow;
        
        private UICloseWindow mUICloseWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndNewAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenAndNewAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditCellContentsFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EditCellContentsFormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=a2' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=a2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Testa2ChangedToA2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Testa2ChangedToA2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals 'A2'
        /// </summary>
        public string UITextBoxContentsEditText = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedToFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedToFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBoxValueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpMenuAndChangeColors'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class HelpMenuAndChangeColorsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'pink' in 'comboBoxColors' combo box
        /// </summary>
        public string UIComboBoxColorsComboBoxSelectedItem = "pink";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndUpdateASavedFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenAndUpdateASavedFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=B2/A1' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=B2/A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellNameDisplayedProperly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CellNameDisplayedProperlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'C4'
        /// </summary>
        public string UITextBoxCellNameEditText = "C4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedCorrectly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedCorrectlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals '6'
        /// </summary>
        public string UITextBoxValueEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsUpdatedCorrectly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsUpdatedCorrectlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals 'B2/A1'
        /// </summary>
        public string UITextBoxContentsEditText = "B2/A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFileAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveFileAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'demo1.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo1.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterInvalidCellName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EnterInvalidCellNameParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=aa7 + 9' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=aa7 + 9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckContentsUnchanged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CheckContentsUnchangedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals ''
        /// </summary>
        public string UITextBoxContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterInvalidSyntax'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EnterInvalidSyntaxParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=32 + - 15.3' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=32 + - 15.3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsNotUpdated'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsNotUpdatedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals ''
        /// </summary>
        public string UITextBoxContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularDependencySelf'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularDependencySelfParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=G6' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=G6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsNotUpdated1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsNotUpdated1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals ''
        /// </summary>
        public string UITextBoxContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdatingSomeCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdatingSomeCellsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '17.56' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "17.56";
        
        /// <summary>
        /// Type 'hello' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText1 = "hello";
        
        /// <summary>
        /// Type '=D4' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText2 = "=D4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectedCellNameDisplayed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SelectedCellNameDisplayedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'E6'
        /// </summary>
        public string UITextBoxCellNameEditText = "E6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedCorrectly1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedCorrectly1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals '17.56'
        /// </summary>
        public string UITextBoxValueEditText = "17.56";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsUpdatedCorrectly1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsUpdatedCorrectly1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals 'D4'
        /// </summary>
        public string UITextBoxContentsEditText = "D4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFileAndClose1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveFileAndClose1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Test1.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test1.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CreateFormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=D1 + D2' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=D1 + D2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedToFormulaError1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedToFormulaError1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBoxValueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsUpdatedCorrectly2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsUpdatedCorrectly2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals 'D1+D2'
        /// </summary>
        public string UITextBoxContentsEditText = "D1+D2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeContentsOfDependentCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ChangeContentsOfDependentCellParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=15.6/9' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=15.6/9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedCorrectly2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedCorrectly2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals '1.73333333333333'
        /// </summary>
        public string UITextBoxValueEditText = "1.73333333333333";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsUpdatedCorrectly3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsUpdatedCorrectly3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals '15.6/9'
        /// </summary>
        public string UITextBoxContentsEditText = "15.6/9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorRemains'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorRemainsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBoxValueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularDependency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularDependencyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsNotUpdated2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsNotUpdated2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals ''
        /// </summary>
        public string UITextBoxContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenExistingFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenExistingFileParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'demo1.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo1.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateCellWithFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdateCellWithFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=17.34/2+(8)' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "=17.34/2+(8)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedCorrectly3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedCorrectly3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals '16.67'
        /// </summary>
        public string UITextBoxValueEditText = "16.67";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentsDisplayedCorrectly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ContentsDisplayedCorrectlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxContents' text box equals '17.34/2+(8)'
        /// </summary>
        public string UITextBoxContentsEditText = "17.34/2+(8)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateCellToReferenceString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdateCellToReferenceStringParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'yes' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "yes";
        
        /// <summary>
        /// Type '=F9' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText1 = "=F9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorDisplayed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorDisplayedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBoxValueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateReferencedCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UpdateReferencedCellParams
    {
        
        #region Fields
        /// <summary>
        /// Type '987' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "987";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValueUpdatedCorrectly4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValueUpdatedCorrectly4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxValue' text box equals '987'
        /// </summary>
        public string UITextBoxValueEditText = "987";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditSheetAndThenOpenSheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EditSheetAndThenOpenSheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowExePath = "C:\\Users\\Camille\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetApplicatiWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'never again playing video games' in 'textBoxContents' text box
        /// </summary>
        public string UITextBoxContentsEditText = "never again playing video games";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'Test1.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test1.sprd";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiWindow : WinWindow
    {
        
        public UISpreadsheetApplicatiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Application";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UISpreadsheetApplicatiTitleBar UISpreadsheetApplicatiTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiTitleBar == null))
                {
                    this.mUISpreadsheetApplicatiTitleBar = new UISpreadsheetApplicatiTitleBar(this);
                }
                return this.mUISpreadsheetApplicatiTitleBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UITextBoxValueWindow UITextBoxValueWindow
        {
            get
            {
                if ((this.mUITextBoxValueWindow == null))
                {
                    this.mUITextBoxValueWindow = new UITextBoxValueWindow(this);
                }
                return this.mUITextBoxValueWindow;
            }
        }
        
        public UITextBoxContentsWindow UITextBoxContentsWindow
        {
            get
            {
                if ((this.mUITextBoxContentsWindow == null))
                {
                    this.mUITextBoxContentsWindow = new UITextBoxContentsWindow(this);
                }
                return this.mUITextBoxContentsWindow;
            }
        }
        
        public UIUpdateContentsWindow UIUpdateContentsWindow
        {
            get
            {
                if ((this.mUIUpdateContentsWindow == null))
                {
                    this.mUIUpdateContentsWindow = new UIUpdateContentsWindow(this);
                }
                return this.mUIUpdateContentsWindow;
            }
        }
        
        public UIComboBoxColorsWindow UIComboBoxColorsWindow
        {
            get
            {
                if ((this.mUIComboBoxColorsWindow == null))
                {
                    this.mUIComboBoxColorsWindow = new UIComboBoxColorsWindow(this);
                }
                return this.mUIComboBoxColorsWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        
        private UISpreadsheetApplicatiTitleBar mUISpreadsheetApplicatiTitleBar;
        
        private UIA1Window mUIA1Window;
        
        private UITextBoxValueWindow mUITextBoxValueWindow;
        
        private UITextBoxContentsWindow mUITextBoxContentsWindow;
        
        private UIUpdateContentsWindow mUIUpdateContentsWindow;
        
        private UIComboBoxColorsWindow mUIComboBoxColorsWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIInstructionsMenuItem
        {
            get
            {
                if ((this.mUIInstructionsMenuItem == null))
                {
                    this.mUIInstructionsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIInstructionsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Instructions";
                    this.mUIInstructionsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInstructionsMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIInstructionsMenuItem;
            }
        }
        
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIInstructionsMenuItem;
        
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiTitleBar : WinTitleBar
    {
        
        public UISpreadsheetApplicatiTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellName";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellNameEdit
        {
            get
            {
                if ((this.mUITextBoxCellNameEdit == null))
                {
                    this.mUITextBoxCellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Selected Cell Name:";
                    this.mUITextBoxCellNameEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxCellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBoxValueWindow : WinWindow
    {
        
        public UITextBoxValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxValue";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxValueEdit
        {
            get
            {
                if ((this.mUITextBoxValueEdit == null))
                {
                    this.mUITextBoxValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUITextBoxValueEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBoxContentsWindow : WinWindow
    {
        
        public UITextBoxContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxContents";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxContentsEdit
        {
            get
            {
                if ((this.mUITextBoxContentsEdit == null))
                {
                    this.mUITextBoxContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents:";
                    this.mUITextBoxContentsEdit.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUITextBoxContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUpdateContentsWindow : WinWindow
    {
        
        public UIUpdateContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonUpdateContents";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UIUpdateContentsButton
        {
            get
            {
                if ((this.mUIUpdateContentsButton == null))
                {
                    this.mUIUpdateContentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUpdateContentsButton.SearchProperties[WinButton.PropertyNames.Name] = "Update Contents";
                    this.mUIUpdateContentsButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIUpdateContentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUpdateContentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIComboBoxColorsWindow : WinWindow
    {
        
        public UIComboBoxColorsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxColors";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBoxColorsComboBox
        {
            get
            {
                if ((this.mUIComboBoxColorsComboBox == null))
                {
                    this.mUIComboBoxColorsComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxColorsComboBox.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUIComboBoxColorsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBoxColorsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiWindow1 : WinWindow
    {
        
        public UISpreadsheetApplicatiWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Application";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetApplicatiTitleBar1 UISpreadsheetApplicatiTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetApplicatiTitleBar == null))
                {
                    this.mUISpreadsheetApplicatiTitleBar = new UISpreadsheetApplicatiTitleBar1(this);
                }
                return this.mUISpreadsheetApplicatiTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetApplicatiTitleBar1 mUISpreadsheetApplicatiTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetApplicatiTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetApplicatiTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet Application");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet Application");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInstructionsWindow : WinWindow
    {
        
        public UIInstructionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Instructions";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Instructions");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Instructions");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemosprdListItem UIDemosprdListItem
        {
            get
            {
                if ((this.mUIDemosprdListItem == null))
                {
                    this.mUIDemosprdListItem = new UIDemosprdListItem(this);
                }
                return this.mUIDemosprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemosprdListItem mUIDemosprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDemosprdListItem : WinListItem
    {
        
        public UIDemosprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Close");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Close");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
