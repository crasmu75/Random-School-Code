{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil Consolas;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red87\green166\blue74;\red30\green30\blue30;\red220\green220\blue220;\red86\green156\blue214;\red180\green180\blue180;\red78\green201\blue176;\red214\green157\blue133;\red181\green206\blue168;\red200\green200\blue200;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sl240\slmult1\cf1\highlight2\lang9\f0\fs19 // Author: Camille Rasmussen\cf3\par
\cf1 // Assigment # 10 CS 3810\cf3\par
\cf1 // December 2, 2014\cf3\par
\par
\cf4 using\cf3  System;\par
\cf4 using\cf3  System\cf5 .\cf3 Collections\cf5 .\cf3 Generic;\par
\cf4 using\cf3  System\cf5 .\cf3 Linq;\par
\cf4 using\cf3  System\cf5 .\cf3 Text;\par
\cf4 using\cf3  System\cf5 .\cf3 Threading\cf5 .\cf3 Tasks;\par
\par
\cf4 namespace\cf3  FullyAssociativeCache\par
\{\par
\tab\cf1 /// <summary>\cf3\par
\tab\cf1 /// Simulates hits and misses on a Fully-Associative Cache for a 900 bit\cf3\par
\tab\cf1 /// cache size and user-inputted block size, number of ways, and number \cf3\par
\tab\cf1 /// of sets. \cf3\par
\tab\cf1 /// </summary>\cf3\par
\tab\cf4 class\cf3  \cf6 Program\cf3\par
\tab\{\par
\tab\tab\cf4 static\cf3  \cf4 void\cf3  Main(\cf4 string\cf3 [] args)\par
\tab\tab\{\par
\tab\tab\tab\cf1 // Prompt user for number of rows for cache of 900 bits\cf3\par
\tab\tab\tab\cf6 Console\cf5 .\cf3 Write(\cf7 "Enter block size in bytes: "\cf3 );\par
\tab\tab\tab\cf4 int\cf3  blockSize \cf5 =\cf3  \cf6 Convert\cf5 .\cf3 ToInt32(\cf6 Console\cf5 .\cf3 ReadLine());\par
\tab\tab\tab\cf6 Console\cf5 .\cf3 Write(\cf7 "Enter number of rows: "\cf3 );\par
\tab\tab\tab\cf4 int\cf3  rows \cf5 =\cf3  \cf6 Convert\cf5 .\cf3 ToInt32(\cf6 Console\cf5 .\cf3 ReadLine());\par
\par
\tab\tab\tab\cf1 // separate 16 bit binary address into tags and offsets\cf3\par
\tab\tab\tab\cf4 int\cf3  bitsForOffset \cf5 =\cf3  \cf6 Convert\cf5 .\cf3 ToInt32(\cf6 Math\cf5 .\cf3 Ceiling(\cf6 Math\cf5 .\cf3 Log(blockSize, \cf8 2\cf3 )));\par
\tab\tab\tab\cf4 int\cf3  bitsForTag \cf5 =\cf3  \cf8 16\cf3  \cf5 -\cf3  bitsForOffset;\par
\par
\tab\tab\tab\cf1 // calculate bit sizes for cache rows\cf3\par
\tab\tab\tab\cf4 int\cf3  bitsForDataBlock \cf5 =\cf3  blockSize \cf5 *\cf3  \cf8 8\cf3 ;\par
\tab\tab\tab\cf4 int\cf3  bitsForLRU \cf5 =\cf3  \cf6 Convert\cf5 .\cf3 ToInt32(\cf6 Math\cf5 .\cf3 Ceiling(\cf6 Math\cf5 .\cf3 Log(rows, \cf8 2\cf3 )));\par
\tab\tab\tab\cf4 int\cf3  totalBits \cf5 =\cf3  (\cf8 1\cf3  \cf5 +\cf3  bitsForTag \cf5 +\cf3  bitsForDataBlock \cf5 +\cf3  bitsForLRU) \cf5 *\cf3  rows;\par
\par
\tab\tab\tab\cf1 // check if these numbers will work\cf3\par
\tab\tab\tab\cf4 if\cf3  (totalBits \cf5 >\cf3  \cf8 900\cf3 )\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Total bits used exceeds cache capacity of 900, please try again later."\cf3 );\par
\tab\tab\tab\cf4 else\cf3\par
\tab\tab\tab\{\par
\tab\tab\tab\tab\cf1 // new list for tags to keep track of least recently used\cf3\par
\tab\tab\tab\tab\cf6 LinkedList\cf5 <\cf4 int\cf5 >\cf3  LRU \cf5 =\cf3  \cf4 new\cf3  \cf6 LinkedList\cf5 <\cf4 int\cf5 >\cf3 ();\par
\par
\tab\tab\tab\tab\cf1 // hit time defaults to 1\cf3\par
\tab\tab\tab\tab\cf4 int\cf3  missTime \cf5 =\cf3  \cf8 18\cf3  \cf5 +\cf3  blockSize;\par
\par
\tab\tab\tab\tab\cf1 // fill the memory addresses array and the tags array\cf3\par
\tab\tab\tab\tab\cf4 int\cf3 [] memAddresses \cf5 =\cf3  \{\cf8 16\cf3 , \cf8 20\cf3 , \cf8 24\cf3 , \cf8 28\cf3 , \cf8 32\cf3 , \cf8 36\cf3 , \cf8 60\cf3 , \cf8 64\cf3 , \cf8 56\cf3 , \cf8 60\cf3 , \cf8 64\cf3 , \cf8 68\cf3 , \cf8 72\cf3 , \par
\tab\tab\tab\tab\tab\tab\tab\tab\tab  \cf8 76\cf3 , \cf8 92\cf3 , \cf8 96\cf3 , \cf8 100\cf3 , \cf8 104\cf3 , \cf8 108\cf3 , \cf8 112\cf3 , \cf8 136\cf3 , \cf8 140\cf3\};\par
\par
\tab\tab\tab\tab\cf1 // show the table layout (block sizes, number of rows, etc)\cf3\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "\\nFully-Associative Cache with \{0\} rows and \{1\} bytes per data block: "\cf3 ,\par
\tab\tab\tab\tab\tab rows, blockSize);\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Offset address bits: \{0\}\\n\\nBits in the valid bit: 1\\nBits in the tag: \{1\}"\cf3 , bitsForOffset, bitsForTag);\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Bits in the data block: \{0\}\\nBits for LRU: \{1\}\\nTotal bits used: \{2\}\\nBits remaining: \{3\}\\n"\cf3 ,\par
\tab\tab\tab\tab\tab bitsForDataBlock, bitsForLRU, totalBits, \cf8 900\cf3  \cf5 -\cf3  totalBits);\par
\par
\tab\tab\tab\tab\cf1 // compute and show how long each cache miss will take\cf3\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Hit time: 1 cycle\\nMiss time: \{0\} cycles"\cf3 , missTime);\par
\par
\tab\tab\tab\tab\cf1 // remember to run the loop once and then start calculating \cf3\par
\tab\tab\tab\tab\cf1 // (subsequent loops)\cf3\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "\\nFirst round"\cf3 );\par
\tab\tab\tab\tab RunLoop(memAddresses, blockSize, LRU, missTime, rows);\par
\par
\tab\tab\tab\tab\cf1 // when running through the loop, calculate hit or miss and then calculate\cf3\par
\tab\tab\tab\tab\cf1 // depending on that, how many cycles each one took\cf3\par
\tab\tab\tab\tab\cf1 // add them up and display ending result\cf3\par
\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "\\nSecond round"\cf3 );\par
\tab\tab\tab\tab RunLoop(memAddresses, blockSize, LRU, missTime, rows);\par
\tab\tab\tab\}\par
\tab\tab\}\par
\par
\tab\tab\par
\tab\tab\cf1 /// <summary>\cf3\par
\tab\tab\cf1 /// Run the loop to cache and calculate average CPI\cf3\par
\tab\tab\cf1 /// </summary>\cf3\par
\tab\tab\cf1 /// <param name=\cf9 "memAddresses"\cf1 ></param>\cf3\par
\tab\tab\cf1 /// <param name=\cf9 "blockSize"\cf1 ></param>\cf3\par
\tab\tab\cf1 /// <param name=\cf9 "LRU"\cf1 ></param>\cf3\par
\tab\tab\cf1 /// <param name=\cf9 "missTime"\cf1 ></param>\cf3\par
\tab\tab\cf1 /// <param name=\cf9 "rows"\cf1 ></param>\cf3\par
\tab\tab\cf4 private\cf3  \cf4 static\cf3  \cf4 void\cf3  RunLoop(\cf4 int\cf3 [] memAddresses, \cf4 int\cf3  blockSize, \cf6 LinkedList\cf5 <\cf4 int\cf5 >\cf3  LRU,\par
\tab\tab\tab\cf4 int\cf3  missTime, \cf4 int\cf3  rows)\par
\tab\tab\{\par
\tab\tab\tab\cf4 int\cf3  cycleAccessTime \cf5 =\cf3  \cf8 0\cf3 ;\par
\tab\tab\tab\cf1 // go through each memory address\cf3\par
\tab\tab\tab\cf4 foreach\cf3  (\cf4 int\cf3  addr \cf4 in\cf3  memAddresses)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab\cf4 int\cf3  tag \cf5 =\cf3  addr \cf5 /\cf3  blockSize;\par
\par
\tab\tab\tab\tab\cf1 // if this tag is in the cache\cf3\par
\tab\tab\tab\tab\cf4 if\cf3  (LRU\cf5 .\cf3 Contains(tag))\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Accessing \{0\}\\t(tag \{1\}): hit"\cf3 , addr, tag);\par
\tab\tab\tab\tab\tab cycleAccessTime\cf5 ++\cf3 ;\par
\tab\tab\tab\tab\tab\cf1 // remove it where it is (we will add it to the end later)\cf3\par
\tab\tab\tab\tab\tab LRU\cf5 .\cf3 Remove(tag);\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\cf1 // this tag is not in the cache\cf3\par
\tab\tab\tab\tab\cf4 else\cf3\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Accessing \{0\}\\t(tag \{1\}): miss - cached"\cf3 , addr, tag);\par
\tab\tab\tab\tab\tab cycleAccessTime \cf5 +=\cf3  missTime;\par
\tab\tab\tab\tab\tab\cf1 // if the cache is full, remove least recently used\cf3\par
\tab\tab\tab\tab\tab\cf4 if\cf3  (LRU\cf5 .\cf3 Count \cf5 ==\cf3  rows)\par
\tab\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\tab LRU\cf5 .\cf3 RemoveFirst();\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\cf1 // make most recently used\cf3\par
\tab\tab\tab\tab LRU\cf5 .\cf3 AddLast(tag);\par
\tab\tab\tab\}\par
\tab\tab\tab\cf1 // Calculate cycle time and average CPI\cf3\par
\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "\\nCost in cycles for this repetition: \{0\}"\cf3 , cycleAccessTime);\par
\tab\tab\tab\cf4 double\cf3  averageCPI \cf5 =\cf3  (\cf4 double\cf3 )cycleAccessTime \cf5 /\cf3  memAddresses\cf5 .\cf3 Count();\par
\tab\tab\tab\cf6 Console\cf5 .\cf3 WriteLine(\cf7 "Average CPI: \{0\}\\n"\cf3 , averageCPI);\par
\tab\tab\}\par
\tab\}\par
\}\par
\cf0\highlight0\f1\fs22\par
}
 