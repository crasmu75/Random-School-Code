using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace FormulaEvaluator
{
    public static class Evaluator
    {
        public delegate int Lookup(String v);

        public static Stack<int> values;
        public static Stack<String> operators;

        public static int Evaluate(String userInput, Lookup variableEvaluator)
        {
            int result = 0;

            values = new Stack<int>();
            operators = new Stack<String>();

            //split string into tokens
            string[] substrings = Regex.Split(userInput, "(\\()|(\\))|(-)|(\\+)|(\\*)|(/)");
            
            //remove white spaces
            substrings = RemoveWhitespace(substrings);

            //sort to appropriate stacks
            SortToStacks(substrings, variableEvaluator);

            return result;
        }

        private static string[] RemoveWhitespace(string[] tokens)
        {
            for (int i = 0; i < tokens.Length; i++)
            {
                tokens[i] = Regex.Replace(tokens[i], @"\s+", String.Empty);
            }
            return tokens;
        }

        private static void SortToStacks(string[] tokens, Lookup variableEvaluator)
        {
            Regex regExValues = new Regex(@"^[a-zA-Z0-9]+$");
            Regex regExOperators = new Regex("(\\()|(\\))|(-)|(\\+)|(\\*)|(/)");

            foreach (String character in tokens)
            {
                Console.WriteLine(character);
                //does this token contain only numbers and letters?
                if (regExValues.IsMatch(character))
                {
                    //does it contain letters?
                    if (Regex.IsMatch(character, "[A-Za-z]"))
                    {
                        //must be a variable
                        if (ValidateVariable(character))
                            if (variableEvaluator(character) == null)
                                throw new ArgumentException("Variable has no value");
                            else
                                Infix(Convert.ToString(variableEvaluator(character)), "intorvar");
                    }
                    //must be an integer
                    else
                        Infix(character, "intorvar");
                }
                //must be an operator or invalid
                else
                    //is it an operator?
                    if (regExOperators.IsMatch(character))
                        Infix(character, "operator");
                    //must be invalid
                    else
                        throw new ArgumentException("Invalid syntax in expression");
            }
        }

        private static int Infix(String token, String type)
        {
            int leftOperand;
            int rightOperand;
            int result = 0;

            int res;

            if (type == "intorvar")
            {
                if (operators.Count != 0)
                    if (operators.Peek() == "*" || operators.Peek() == "/")
                    {
                        leftOperand = values.Pop();
                        operators.Pop();
                        res = PerformOperation(operators.Peek(), leftOperand, Convert.ToInt32(token));
                        values.Push(res);
                    }
                else   
                    values.Push(Convert.ToInt32(token));
            }
            if (type == "operator")
            {
                if (token == "+" || token == "-")
                {
                    if(operators.Peek() == "+" || operators.Peek() == "-")
                    {
                        res = PerformOperation(operators.Pop(), values.Pop(), values.Pop());
                        values.Push(res);
                    }
                    operators.Push(token);
                }
                if (token == "*" || token == "/" || token == "(")
                    operators.Push(token);
                if (token == ")")
                {
                    res = PerformOperation(operators.Pop(), values.Pop(), values.Pop());
                    values.Push(res);

                    Console.WriteLine(operators.Peek());
                }


            }

            return result;
        }

        private static Boolean ValidateVariable(String variable)
        {
            if (Char.IsLetter(variable[0]))
                if (Char.IsDigit(variable[variable.Length - 1]))
                    return true;
                else
                    throw new ArgumentException("Invalid syntax on variable");
            else
                throw new ArgumentException("Invalid syntax on variable");
        }

        private static int PerformOperation(String operation, int leftOperand, int rightOperand)
        {
            int result = 0;
            if (operation == "*")
                result = leftOperand * rightOperand;
            if (operation == "/")
                result = leftOperand / rightOperand;
            if (operation == "+")
                result = leftOperand + rightOperand;
            if (operation == "-")
                result = leftOperand - rightOperand;
            return result;

        }
    }
}
