using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace CustomNetworking
{
	/// <summary> 
	/// A StringSocket is a wrapper around a Socket.  It provides methods that
	/// asynchronously read lines of text (strings terminated by newlines) and 
	/// write strings. (As opposed to Sockets, which read and write raw bytes.)  
	///
	/// StringSockets are thread safe.  This means that two or more threads may
	/// invoke methods on a shared StringSocket without restriction.  The
	/// StringSocket takes care of the synchonization.
	/// 
	/// Each StringSocket contains a Socket object that is provided by the client.  
	/// A StringSocket will work properly only if the client refrains from calling
	/// the contained Socket's read and write methods.
	/// 
	/// If we have an open Socket s, we can create a StringSocket by doing
	/// 
	///    StringSocket ss = new StringSocket(s, new UTF8Encoding());
	/// 
	/// We can write a string to the StringSocket by doing
	/// 
	///    ss.BeginSend("Hello world", callback, payload);
	///    
	/// where callback is a SendCallback (see below) and payload is an arbitrary object.
	/// This is a non-blocking, asynchronous operation.  When the StringSocket has 
	/// successfully written the string to the underlying Socket, or failed in the 
	/// attempt, it invokes the callback.  The parameters to the callback are a
	/// (possibly null) Exception and the payload.  If the Exception is non-null, it is
	/// the Exception that caused the send attempt to fail.
	/// 
	/// We can read a string from the StringSocket by doing
	/// 
	///     ss.BeginReceive(callback, payload)
	///     
	/// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
	/// This is non-blocking, asynchronous operation.  When the StringSocket has read a
	/// string of text terminated by a newline character from the underlying Socket, or
	/// failed in the attempt, it invokes the callback.  The parameters to the callback are
	/// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
	/// string or the Exception will be non-null, but nor both.  If the string is non-null, 
	/// it is the requested string (with the newline removed).  If the Exception is non-null, 
	/// it is the Exception that caused the send attempt to fail.
	/// </summary>

	public class StringSocket
	{
		private Socket socket;
		private Encoding encoding;
		public delegate void SendCallback(Exception e, object payload);
		public delegate void ReceiveCallback(String s, Exception e, object payload);

		private Queue<Tuple<String, SendCallback, object>> toSend;
		private Queue<String> receivedMessages;
		private Queue<Tuple<ReceiveCallback, object>> receiveRequests;
		private bool currentlySending;
		private bool sendSpin;
		private bool receiveSpin;
		private string outgoingMessage;
		private string incomingMessage;
		private readonly object sendSync = new object();
		private Thread sendingThread;
		private Thread receivingThread;
		private byte[] buffer;

		/// <summary>
		/// Creates a StringSocket from a regular Socket, which should already be connected.  
		/// The read and write methods of the regular Socket must not be called after the
		/// LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
		/// The encoding to use to convert between raw bytes and strings is also provided.
		/// </summary>
		public StringSocket(Socket s, Encoding e)
		{
			socket = s;
			encoding = e;
			currentlySending = false;
			toSend = new Queue<Tuple<string, SendCallback, object>>();
			receivedMessages = new Queue<String>();
			receiveRequests = new Queue<Tuple<ReceiveCallback, object>>();
			outgoingMessage = "";
			incomingMessage = "";
			sendSpin = true;
			receiveSpin = true;
			sendingThread = new Thread(StartSendMessage);
			sendingThread.Start();
			receivingThread = new Thread(SpinReceiveThread);
			receivingThread.Start();
		}

		/// <summary>
		/// We can write a string to a StringSocket ss by doing
		/// 
		///    ss.BeginSend("Hello world", callback, payload);
		///    
		/// where callback is a SendCallback (see below) and payload is an arbitrary object.
		/// This is a non-blocking, asynchronous operation.  When the StringSocket has 
		/// successfully written the string to the underlying Socket, or failed in the 
		/// attempt, it invokes the callback.  The parameters to the callback are a
		/// (possibly null) Exception and the payload.  If the Exception is non-null, it is
		/// the Exception that caused the send attempt to fail. 
		/// 
		/// This method is non-blocking.  This means that it does not wait until the string
		/// has been sent before returning.  Instead, it arranges for the string to be sent
		/// and then returns.  When the send is completed (at some time in the future), the
		/// callback is called on another thread.
		/// 
		/// This method is thread safe.  This means that multiple threads can call BeginSend
		/// on a shared socket without worrying around synchronization.  The implementation of
		/// BeginSend must take care of synchronization instead.  On a given StringSocket, each
		/// string arriving via a BeginSend method call must be sent (in its entirety) before
		/// a later arriving string can be sent.
		/// </summary>
		public void BeginSend(String s, SendCallback callback, object payload)
		{
			Tuple<String, SendCallback, object> queueTuple;
			if (s.Length != 0)
			{
				queueTuple = Tuple.Create(s, callback, payload);
				toSend.Enqueue(queueTuple);
			}
		}

		private void StartSendMessage()
		{
			Tuple<String, SendCallback, object> tupleToSend;
			while (sendSpin)
			{
				if (toSend.Count != 0)
				{
					
					if (!currentlySending)
					{
						tupleToSend = toSend.Dequeue();
						outgoingMessage = tupleToSend.Item1;

						// create a new null exception to be invoked with the callback if one isn't caught during send attempt
						Exception failedAttempt = null;
						try
						{
							//lock (sendSync)
							//{
								SendMessage(outgoingMessage);
								//SendBytes();
							//}
						}
						catch (Exception e)
						{
							failedAttempt = e;
						}
						finally
						{
							// invoke the first callback in the callback queue
							//		parameters include a (possibly null) exception and first payload on payload queue
							tupleToSend.Item2.Invoke(failedAttempt, tupleToSend.Item3);
						}
					}
				}
			}
		}

		/// <summary>
		/// Sends a string to the client
		/// </summary>
		private void SendMessage(String message)
		{
			// Lets see what thread we are
			int managedThreadId = Thread.CurrentThread.ManagedThreadId;

			// Get exclusive access to send mechanism
			lock (sendSync)
			{
				// Append the message to the unsent string
				outgoingMessage += message;

				// If there's not a send ongoing, start one.
				if (!currentlySending)
				{
					currentlySending = true;
					SendBytes();
				}
			}
		}


		/// <summary>
		/// Attempts to send the entire outgoing string.
		/// </summary>
		private void SendBytes()
		{
			if (outgoingMessage == "")
			{
				currentlySending = false;
			}
			else
			{
				byte[] outgoingBuffer = encoding.GetBytes(outgoingMessage);
				outgoingMessage = "";
				socket.BeginSend(outgoingBuffer, 0, outgoingBuffer.Length,
								 SocketFlags.None, MessageSent, outgoingBuffer);
			}
		}


		/// <summary>
		/// Called when a message has been successfully sent
		/// </summary>
		private void MessageSent(IAsyncResult result)
		{
			// Find out how many bytes were actually sent
			int bytes = socket.EndSend(result);

			// Get exclusive access to send mechanism
			lock (sendSync)
			{
				// Get the bytes that we attempted to send
				byte[] outgoingBuffer = (byte[])result.AsyncState;

				// Prepend the unsent bytes and try sending again.
				if (bytes != 0)
				{
					outgoingMessage = encoding.GetString(outgoingBuffer, bytes,
												  outgoingBuffer.Length - bytes) + outgoingMessage;
					SendBytes();
				}
			}

		}

		/// <summary>
		/// 
		/// <para>
		/// We can read a string from the StringSocket by doing
		/// </para>
		/// 
		/// <para>
		///     ss.BeginReceive(callback, payload)
		/// </para>
		/// 
		/// <para>
		/// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
		/// This is non-blocking, asynchronous operation.  When the StringSocket has read a
		/// string of text terminated by a newline character from the underlying Socket, or
		/// failed in the attempt, it invokes the callback.  The parameters to the callback are
		/// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
		/// string or the Exception will be non-null, but nor both.  If the string is non-null, 
		/// it is the requested string (with the newline removed).  If the Exception is non-null, 
		/// it is the Exception that caused the send attempt to fail.
		/// </para>
		/// 
		/// <para>
		/// This method is non-blocking.  This means that it does not wait until a line of text
		/// has been received before returning.  Instead, it arranges for a line to be received
		/// and then returns.  When the line is actually received (at some time in the future), the
		/// callback is called on another thread.
		/// </para>
		/// 
		/// <para>
		/// This method is thread safe.  This means that multiple threads can call BeginReceive
		/// on a shared socket without worrying around synchronization.  The implementation of
		/// BeginReceive must take care of synchronization instead.  On a given StringSocket, each
		/// arriving line of text must be passed to callbacks in the order in which the corresponding
		/// BeginReceive call arrived.
		/// </para>
		/// 
		/// <para>
		/// Note that it is possible for there to be incoming bytes arriving at the underlying Socket
		/// even when there are no pending callbacks.  StringSocket implementations should refrain
		/// from buffering an unbounded number of incoming bytes beyond what is required to service
		/// the pending callbacks.        
		/// </para>
		/// 
		/// <param name="callback"> The function to call upon receiving the data</param>
		/// <param name="payload"> 
		/// The payload is "remembered" so that when the callback is invoked, it can be associated
		/// with a specific Begin Receiver....
		/// </param>  
		/// 
		/// <example>
		///   Here is how you might use this code:
		///   <code>
		///                    client = new TcpClient("localhost", port);
		///                    Socket       clientSocket = client.Client;
		///                    StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
		///                    receiveSocket.BeginReceive(CompletedReceive1, 1);
		/// 
		///   </code>
		/// </example>
		/// </summary>
		/// 
		/// 

		public void BeginReceive(ReceiveCallback callback, object payload)
		{
			receiveRequests.Enqueue(new Tuple<ReceiveCallback, object>(callback, payload));

			buffer = new byte[1024];
			socket.BeginReceive(buffer, 0, buffer.Length,
									SocketFlags.None, MessageReceived, buffer);
		}

		/// <summary>
		/// This method constantly spins a thread looking for new incoming messages
		/// from the socket. When it receives a message, the incoming byte array is 
		/// converted to a string and put on the receivedMessages queue.
		/// It is controlled by a boolean which will be set to false to end spinning
		/// when the close() method is called by the user.
		/// </summary>
		private void SpinReceiveThread()
		{
			Tuple<ReceiveCallback, object> request;
			string message;
			// continue thread spin loop until close() is called
			while (receiveSpin)
			{
				if (receiveRequests.Count != 0 && receivedMessages.Count != 0)
				{
					request = receiveRequests.Dequeue();
					message = receivedMessages.Dequeue();
					request.Item1.Invoke(message, null, request.Item2);
				}
			}
		}

		/// <summary>
		/// Called when some data has been received.
		/// </summary>
		private void MessageReceived(IAsyncResult result)
		{
			// Lets see what thread we are
			int managedThreadId = Thread.CurrentThread.ManagedThreadId;

			// Get the buffer to which the data was written.
			byte[] buffer = (byte[])(result.AsyncState);

			// Figure out how many bytes have come in
			int bytes = socket.EndReceive(result);

			// If no bytes were received, it means the client closed its side of the socket.
			// Report that to the console and close our socket.
			if (bytes == 0)
			{
				return;
			}
			// Otherwise, decode and display the incoming bytes.  Then request more bytes.
			else
			{
				// Convert the bytes into a string
				incomingMessage += encoding.GetString(buffer, 0, bytes);

				// Echo any complete lines, converted to upper case
				int index;
				while ((index = incomingMessage.IndexOf('\n')) >= 0)
				{
					String line = incomingMessage.Substring(0, index);
					receivedMessages.Enqueue(line);
					incomingMessage = incomingMessage.Substring(index + 1);
				}

				// Ask for some more data
				socket.BeginReceive(buffer, 0, buffer.Length,
					SocketFlags.None, MessageReceived, buffer);
			}
		}

		/// <summary>
		/// Calling the close method will close the String Socket (and the underlying
		/// standard socket).  The close method  should make sure all 
		///
		/// Note: ideally the close method should make sure all pending data is sent
		///       
		/// Note: closing the socket should discard any remaining messages and       
		///       disable receiving new messages
		/// 
		/// Note: Make sure to shutdown the socket before closing it.
		///
		/// Note: the socket should not be used after closing.
		/// </summary>
		public void Close()
		{
			SendBytes();

			receiveSpin = false;
			receivedMessages.Clear();

			sendSpin = false;
			toSend.Clear();

			socket.Shutdown(SocketShutdown.Both);

			socket.Close();
		}
	}
}
