using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace CustomNetworking
{
	/// <summary> 
	/// A StringSocket is a wrapper around a Socket.  It provides methods that
	/// asynchronously read lines of text (strings terminated by newlines) and 
	/// write strings. (As opposed to Sockets, which read and write raw bytes.)  
	///
	/// StringSockets are thread safe.  This means that two or more threads may
	/// invoke methods on a shared StringSocket without restriction.  The
	/// StringSocket takes care of the synchonization.
	/// 
	/// Each StringSocket contains a Socket object that is provided by the client.  
	/// A StringSocket will work properly only if the client refrains from calling
	/// the contained Socket's read and write methods.
	/// 
	/// If we have an open Socket s, we can create a StringSocket by doing
	/// 
	///    StringSocket ss = new StringSocket(s, new UTF8Encoding());
	/// 
	/// We can write a string to the StringSocket by doing
	/// 
	///    ss.BeginSend("Hello world", callback, payload);
	///    
	/// where callback is a SendCallback (see below) and payload is an arbitrary object.
	/// This is a non-blocking, asynchronous operation.  When the StringSocket has 
	/// successfully written the string to the underlying Socket, or failed in the 
	/// attempt, it invokes the callback.  The parameters to the callback are a
	/// (possibly null) Exception and the payload.  If the Exception is non-null, it is
	/// the Exception that caused the send attempt to fail.
	/// 
	/// We can read a string from the StringSocket by doing
	/// 
	///     ss.BeginReceive(callback, payload)
	///     
	/// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
	/// This is non-blocking, asynchronous operation.  When the StringSocket has read a
	/// string of text terminated by a newline character from the underlying Socket, or
	/// failed in the attempt, it invokes the callback.  The parameters to the callback are
	/// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
	/// string or the Exception will be non-null, but nor both.  If the string is non-null, 
	/// it is the requested string (with the newline removed).  If the Exception is non-null, 
	/// it is the Exception that caused the send attempt to fail.
	/// </summary>

	public class StringSocket
	{
		// These delegates describe the callbacks that are used for sending and receiving strings.
		public delegate void SendCallback(Exception e, object payload);
		public delegate void ReceiveCallback(String s, Exception e, object payload);

		private Socket socket;
		private Encoding encoding;

		private Queue<string> sentMessages;
		private Queue<SendCallback> callbacks;
		private Queue<object> payloads;

		private Queue<string> receivedMessages;

		private byte[] bytes;

		private bool spin;

		private object lockObject = new object();

		/// <summary>
		/// Creates a StringSocket from a regular Socket, which should already be connected.  
		/// The read and write methods of the regular Socket must not be called after the
		/// LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
		/// The encoding to use to convert between raw bytes and strings is also provided.
		/// </summary>
		public StringSocket(Socket s, Encoding e)
		{
			socket = s;
			encoding = e;
			bytes = new byte[256];

			spin = true;

			Thread receivingThread = new Thread(SpinThread);
			receivingThread.Start();
		}

		/// <summary>
		/// We can write a string to a StringSocket ss by doing
		/// 
		///    ss.BeginSend("Hello world", callback, payload);
		///    
		/// where callback is a SendCallback (see below) and payload is an arbitrary object.
		/// This is a non-blocking, asynchronous operation.  When the StringSocket has 
		/// successfully written the string to the underlying Socket, or failed in the 
		/// attempt, it invokes the callback.  The parameters to the callback are a
		/// (possibly null) Exception and the payload.  If the Exception is non-null, it is
		/// the Exception that caused the send attempt to fail. 
		/// 
		/// This method is non-blocking.  This means that it does not wait until the string
		/// has been sent before returning.  Instead, it arranges for the string to be sent
		/// and then returns.  When the send is completed (at some time in the future), the
		/// callback is called on another thread.
		/// 
		/// This method is thread safe.  This means that multiple threads can call BeginSend
		/// on a shared socket without worrying around synchronization.  The implementation of
		/// BeginSend must take care of synchronization instead.  On a given StringSocket, each
		/// string arriving via a BeginSend method call must be sent (in its entirety) before
		/// a later arriving string can be sent.
		/// </summary>
		public void BeginSend(String s, SendCallback callback, object payload)
		{
			// First we want to check for new line characters and and split the string where they occur,
			// adding the substrings to the queue to be sent out. If there is no new line character at 
			// the end of the message passed in, one is added and then the string is added to the queue.

			// This is the index of the current occurence of the new line character
			int newLineIndex;


			while (s.Length != 0)
			{
				newLineIndex = s.IndexOf('\n');
				if (newLineIndex != -1)
				{
					sentMessages.Enqueue((string)s.Remove(0, newLineIndex + 1));
					callbacks.Enqueue(callback);
					payloads.Enqueue(payload);
				}
				else
				{
					sentMessages.Enqueue(s + '\n');
					callbacks.Enqueue(callback);
					payloads.Enqueue(payload);
					break;
				}
			}

			Thread sendingThread = new Thread(SendBytes);
			sendingThread.Start();
			return;
		}

		/// <summary>
		/// 
		/// <para>
		/// We can read a string from the StringSocket by doing
		/// </para>
		/// 
		/// <para>
		///     ss.BeginReceive(callback, payload)
		/// </para>
		/// 
		/// <para>
		/// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
		/// This is non-blocking, asynchronous operation.  When the StringSocket has read a
		/// string of text terminated by a newline character from the underlying Socket, or
		/// failed in the attempt, it invokes the callback.  The parameters to the callback are
		/// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
		/// string or the Exception will be non-null, but nor both.  If the string is non-null, 
		/// it is the requested string (with the newline removed).  If the Exception is non-null, 
		/// it is the Exception that caused the send attempt to fail.
		/// </para>
		/// 
		/// <para>
		/// This method is non-blocking.  This means that it does not wait until a line of text
		/// has been received before returning.  Instead, it arranges for a line to be received
		/// and then returns.  When the line is actually received (at some time in the future), the
		/// callback is called on another thread.
		/// </para>
		/// 
		/// <para>
		/// This method is thread safe.  This means that multiple threads can call BeginReceive
		/// on a shared socket without worrying around synchronization.  The implementation of
		/// BeginReceive must take care of synchronization instead.  On a given StringSocket, each
		/// arriving line of text must be passed to callbacks in the order in which the corresponding
		/// BeginReceive call arrived.
		/// </para>
		/// 
		/// <para>
		/// Note that it is possible for there to be incoming bytes arriving at the underlying Socket
		/// even when there are no pending callbacks.  StringSocket implementations should refrain
		/// from buffering an unbounded number of incoming bytes beyond what is required to service
		/// the pending callbacks.        
		/// </para>
		/// 
		/// <param name="callback"> The function to call upon receiving the data</param>
		/// <param name="payload"> 
		/// The payload is "remembered" so that when the callback is invoked, it can be associated
		/// with a specific Begin Receiver....
		/// </param>  
		/// 
		/// <example>
		///   Here is how you might use this code:
		///   <code>
		///                    client = new TcpClient("localhost", port);
		///                    Socket       clientSocket = client.Client;
		///                    StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
		///                    receiveSocket.BeginReceive(CompletedReceive1, 1);
		/// 
		///   </code>
		/// </example>
		/// </summary>
		/// 
		/// 

		public void BeginReceive(ReceiveCallback callback, object payload)
		{

			return;
			
		}

		/// <summary>
		/// Calling the close method will close the String Socket (and the underlying
		/// standard socket).  The close method  should make sure all 
		///
		/// Note: ideally the close method should make sure all pending data is sent
		///       
		/// Note: closing the socket should discard any remaining messages and       
		///       disable receiving new messages
		/// 
		/// Note: Make sure to shutdown the socket before closing it.
		///
		/// Note: the socket should not be used after closing.
		/// </summary>
		public void Close()
		{

		}

		/// <summary>
		/// This method constantly spins a thread looking for new incoming messages
		/// from the socket. When it receives a message, the incoming byte array is 
		/// converted to a string and put on the receivedMessages queue.
		/// It is controlled by a boolean which will be set to false to end spinning
		/// when the close() method is called by the user.
		/// </summary>
		private void SpinThread()
		{
			// variable to hold the incoming string
			string incomingMessage = "";
			// continue thread spin loop until close() is called
			while(spin)
			{
				// if the socket has something to receive
				if (socket.Available != 0)
				{
					// receive the bytes
					socket.Receive(bytes);
					// use the encoding to get the characters from the byte array
					incomingMessage = encoding.GetChars(bytes).ToString();
					// put the message on the queue
					receivedMessages.Enqueue(incomingMessage);
				}
				// wait half a second, then check socket again
				Thread.Sleep(500);
			}
		}

		/// <summary>
		/// This method sends a message as an array of bytes in a new thread
		/// The message currently at the top of the queue is converted to an array 
		/// of bytes using the encoding object and the byte array is sent to
		/// the socket. The message's respective callback is then invoked.
		/// </summary>
		private void SendBytes()
		{
			// convert the first message on the queue to a byte array
			byte[] bytesss = encoding.GetBytes(sentMessages.Dequeue());
			// create a new null exception to be invoked with the callback if one isn't caught during send attempt
			Exception failedAttempt = null;
			try
			{
				socket.Send(bytesss);
			}
			catch (Exception e)
			{
				failedAttempt = e;
			}
			finally
			{
				// invoke the first callback in the callback queue
				//		parameters include a (possibly null) exception and first payload on payload queue
				callbacks.Dequeue().Invoke(failedAttempt, payloads.Dequeue());
			}
		}
	}
}
